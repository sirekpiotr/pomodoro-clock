{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Timer/Timer.js","Components/TimerController/TimerController.js","Components/TimerTypeContainer/TimerTypeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","timerName","className","Timer","actualTime","time","minutes","Math","floor","seconds","timeFormatter","TimerController","startTimerFunction","pauseTimerFunction","resetTimerFunction","onClick","style","marginRight","icon","faPlay","faPause","faRedo","TimerTypes","name","defaultTime","TimerTypeContainer","setTimerTypeFunction","App","useState","timerType","setTimerType","setTime","passedTime","setPassedTime","timer","useEffect","setTimeout","clearTimeout","newTimerType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a619155.chunk.js","sourcesContent":["import React from \"react\"\n\nimport './Navbar.scss'\n\nconst Navbar = ({ timerName }) => {\n    return (\n        <div className='container'>\n            <p>{timerName}</p>\n        </div>\n    )\n}\n\nexport default Navbar","import React from 'react'\n\nimport './Timer.scss'\n\nconst Timer = ({ actualTime }) => {\n    const timeFormatter = (time) => {\n        let minutes = Math.floor(time / 60);\n        let seconds = time % 60\n\n        if (minutes < 10) {\n            minutes = `0${minutes}`\n        } \n\n        if (seconds < 10) {\n            seconds = `0${seconds}`\n        }\n\n        return `${minutes}:${seconds}`\n    }\n\n    return(\n        <div className='timer-container'>\n            <h1 className='timer-time'>{timeFormatter(actualTime)}</h1>\n        </div>\n    )\n}\n\nexport default Timer","import React from \"react\"\n\nimport './TimerController.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay, faPause, faRedo } from '@fortawesome/free-solid-svg-icons'\n\nconst TimerController = ({ startTimerFunction, pauseTimerFunction, resetTimerFunction }) => {\n    return (\n        <div className='timer-controller-container'>\n            <button className='button button-play' onClick={() => startTimerFunction()}>\n                <FontAwesomeIcon style={{ marginRight: \"10px\" }}icon={faPlay}/>\n                Play\n            </button>\n            <button className='button' onClick={() => pauseTimerFunction()}>\n                <FontAwesomeIcon style={{ marginRight: \"10px\" }}icon={faPause}/>\n                Pause\n            </button>\n            <button className='button' onClick={() => resetTimerFunction()}>\n                <FontAwesomeIcon style={{ marginRight: \"10px\" }}icon={faRedo}/>\n                Reset\n            </button>\n        </div>\n    )\n} \n\nexport default TimerController","import React from 'react'\n\nimport './TimerTypeContainer.scss'\n\nconst TimerTypes = [{\n        name: 'Focus time',\n        defaultTime: 1500\n    }, {\n        name: 'Short break',\n        defaultTime: 300\n    }, {\n        name: 'Long break',\n        defaultTime: 900\n    }\n]\n\nconst TimerTypeContainer = ({ setTimerTypeFunction }) => {\n    return (\n        <>\n            <p className='timer-select-headline'>Select timer mode</p>\n            <div className='timer-types-container'>\n                <div className='timer-type' onClick={() => setTimerTypeFunction(TimerTypes[0])}>\n                    <p className='timer-name'>Focus time</p>\n                    <p>25 minutes</p>    \n                </div>\n                <div className='timer-type' onClick={() => setTimerTypeFunction(TimerTypes[1])}>\n                    <p className='timer-name'>Short break</p>\n                    <p>5 minutes</p>    \n                </div>\n                <div className='timer-type' onClick={() => setTimerTypeFunction(TimerTypes[2])}>\n                    <p className='timer-name'>Long break</p>\n                    <p>15 minutes</p>    \n                </div>\n            </div> \n        </>\n    )\n}\n\nexport default TimerTypeContainer","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport Navbar from './Components/Navbar/Navbar'\nimport Timer from './Components/Timer/Timer'\nimport TimerController from './Components/TimerController/TimerController'\nimport TimerTypeContainer from './Components/TimerTypeContainer/TimerTypeContainer';\n\nfunction App() {\n  const [timerType, setTimerType] = useState({ \n    name: 'Focus time',\n    defaultTime: 1500\n  })\n\n  const [time, setTime] = useState(timerType.defaultTime)\n  const [passedTime, setPassedTime] = useState(0)\n\n  let timer = null\n\n  useEffect(() => {\n    if (time > 0) {\n      timer = setTimeout(() => setTime(time - 1), 1000)\n    }\n  }, [time])\n\n  const resetTimer = () => {\n    clearTimeout(timer)\n    setTime(timerType.defaultTime)\n  }\n\n  const pauseTimer = () => {\n    clearTimeout(timer)\n    setPassedTime(timerType.defaultTime - time)\n  }\n\n  const startTimer = () => {\n    if (timer !== null) { clearTimeout(timer) }\n    setTime(timerType.defaultTime - passedTime - 1)\n  }\n\n  const setTimer = (newTimerType) => {\n    setTimerType({ name: newTimerType.name, defaultTime: newTimerType.defaultTime })\n    clearTimeout(timer)\n\n    setTime(newTimerType.defaultTime)\n  }\n\n  return (\n    <div className=\"app\">\n      <Navbar timerName={timerType.name} />\n      <Timer actualTime={time} />\n      <TimerController startTimerFunction={startTimer} pauseTimerFunction={pauseTimer} resetTimerFunction={resetTimer} />\n      <TimerTypeContainer setTimerTypeFunction={setTimer} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}